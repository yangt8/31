#Molly Taing 82155694 and Yang Tang 53979886 ICS 31 Lab Sec2#c#c1               print('---c1---')def abbreviate(month:str)->str:    "Return the abbreviation of the month"    return month[0]+month[1]+month[2]assert abbreviate('January')=='Jan'assert abbreviate('abril')=='abr'#c2print('---c2---')def find_area_square(length:float)->float:    "Return length of the second power"    return length**2assert find_area_square(1) == 1assert find_area_square(5) == 25#c3print('---c3---')def find_area_circle(radius:float)->float:    "Return pi times the radius of the second power"    return (3.14159*(radius**2))assert find_area_circle(1) == 3.14159assert find_area_circle(5) == 78.53975#c4print('---c4---')def print_even_numbers(even:list)->list:    "Return all the even number in the list"    for i in even:        if (i%2 == 0):           print(i)print_even_numbers([2, 47, 31, 99, 20, 19, 23, 105, 710, 1004])#c5print('---c5---')def calculate_shipping(weight:float)->float:    "Return the price of shipping according to the weight"    if weight<2:        return 2    if 2<weight<10:        return 5    if weight>=10:        return 5+(weight-10)*1.50assert calculate_shipping(1.5) == 2.00assert calculate_shipping(7) == 5.00assert calculate_shipping(15) == 12.50#c6print('---c6---')def create_square(x,y,h):    import tkinter    my_window=tkinter.Tk()    my_canvas=tkinter.Canvas(my_window,width=500,height=500)    my_canvas.pack()    my_canvas.create_rectangle(x,y,x+h,y+h)    tkinter.mainloop()    returncreate_square(100,100,50)#c7print('---c7---')def create_circle(x,y,d):    import tkinter    my_window=tkinter.Tk()    my_canvas=tkinter.Canvas(my_window,width=500,height=500)    my_canvas.pack()    my_canvas.create_oval(x,y,x+d,y+d)    tkinter.mainloop()    returncreate_circle(100,100,50)#d#d1print('---d1---')from collections import namedtuple   Restaurant = namedtuple('Restaurant', 'name cuisine phone dish price')RC = [    Restaurant("Thai Dishes", "Thai", "334-4433", "Mee Krob", 12.50),    Restaurant("Nobu", "Japanese", "335-4433", "Natto Temaki", 5.50),    Restaurant("Nonna", "Italian", "355-4433", "Stracotto", 25.50),    Restaurant("Jitlada", "Thai", "324-4433", "Paht Woon Sen", 15.50),    Restaurant("Nola", "New Orleans", "336-4433", "Jambalaya", 5.50),    Restaurant("Noma", "Modern Danish", "337-4433", "Birch Sap", 35.50),    Restaurant("Addis Ababa", "Ethiopian", "337-4453", "Yesiga Tibs", 10.50) ]def restaurant_price(Restaurant):    return(Restaurant.price)for Restaurant in RC:    assert restaurant_price(Restaurant)for Restaurant in RC:    print(restaurant_price(Restaurant))#d2print('---d2---')RC.sort(key=restaurant_price)print(RC)#d3 print('---d3---')def costliest(Restaurant):    return(RC[-1].name)print(costliest(Restaurant))#d4print('---d4---')from collections import namedtuple   Restaurant = namedtuple('Restaurant', 'name cuisine phone dish price')RC = [    Restaurant("Thai Dishes", "Thai", "334-4433", "Mee Krob", 12.50),    Restaurant("Nobu", "Japanese", "335-4433", "Natto Temaki", 5.50),    Restaurant("Nonna", "Italian", "355-4433", "Stracotto", 25.50),    Restaurant("Jitlada", "Thai", "324-4433", "Paht Woon Sen", 15.50),    Restaurant("Nola", "New Orleans", "336-4433", "Jambalaya", 5.50),    Restaurant("Noma", "Modern Danish", "337-4433", "Birch Sap", 35.50),    Restaurant("Addis Ababa", "Ethiopian", "337-4453", "Yesiga Tibs", 10.50) ]RC2 = sorted(RC, key = restaurant_price)print(RC2)def costliest2(Restaurant):    return(RC2[-1].name)print(costliest2(Restaurant))##################################print('---d4---')def R_price(R:Restaurant):    return R.priceassert R_price(RC[1]) == 5.50price_resets=sorted(RC,key=R_price)for R in price_resets:    print(RC[-1].name)######################################eprint('---e---')from collections import namedtupleBook = namedtuple('Book', 'author title genre year price instock')BSI=[    Book('Jane Austen', 'Pride and Prejudice', 'cookbook', 2003, 213.40, 434),    Book('Anna Sewell', 'Black Beauty', 'mystery', 2001, 543.30, 123),    Book('Stendhal', 'The Red', 'sports', 1994, 123.40, 234),    Book('Charlotte Bronte', 'Jane Eyre', 'technology', 2010, 564.20, 221),    Book('Emily Bront', 'Whitering Heights', 'art', 2013, 443.20, 98),    Book('Tolstoy, Leo', 'War and Peace', 'fiction', 1983, 595.00, 23)]#e1print('---e1---')def Book_title(b):    return b.titlefor b in BSI:    print(Book_title(b))#e2print('---e2---')def Book_title(b):    return b.titleBSI.sort(key=Book_title)for b in BSI:    print(Book_title(b))#e3print("-----e3------")def Book_price(b:float)->float:    return b.price*1.1for b in BSI:    print(Book_price(b))#e4print('---e4---')def Book_title(b):    for b in BSI:        if b.genre=='technology':            return b.titleprint(Book_title(b))###(e.5)print('---e5---')before_2000=[]for Book in BSI:    if Book.year<2000:        before_2000.append(Book.title)print(before_2000)instock_before=[]  ###for Book in BSI:    if Book.title in before_2000:        instock_before.append(Book.instock)print(sum(instock_before))        after_2000=[]for Book in BSI:    if Book.year>2000:        after_2000.append(Book.title)print(after_2000)instock_after=[]for Book in BSI:    if Book.title in after_2000:        instock_after.append(Book.instock)print(sum(instock_after))if len(before_2000)>len(after_2000):    print('More titles before 2000 (', sum(instock_before), 'vs.', sum(instock_after),')')  ###add the number instock else:    print('More titles 2000 or later (', sum(instock_after), 'vs.', sum(instock_before),')')#e6print('---e6---')def inventory_value(b):    return b.price*b.instockBSI.sort(key=inventory_value)def top_value(b):    return BSI[-1]print('The highest-value book is ', top_value(b).title, 'by', top_value(b).author, 'at a value of $', top_value(b).price)#fprint('---f---')import tkintermy_window=tkinter.Tk()my_canvas=tkinter.Canvas(my_window,width=1000,height=1000)my_canvas.pack()def draw_eye(x,y):        my_canvas.create_oval(x,y,x+70, y+40, fill='white')    my_canvas.create_oval(x+15,y,x+55,y+40, fill='black')def draw_nose(x,y):    my_canvas.create_oval(x,y,x+30,y+30)def draw_mouth(x,y):    my_canvas.create_oval(x,y,x+150,y+30, fill='red')def draw_face1(x,y):    my_canvas.create_oval(x,y,x+300,y+350)def draw_face(x,y):    draw_eye(x+35, y+105)    draw_eye(x+185,y+105)    draw_nose(x+135, y+185)    draw_mouth(x+75, y+250)    draw_face1(x,y)draw_face(100,250)draw_face(500,250)tkinter.mainloop()